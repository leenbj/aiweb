generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user") // user, admin, super_admin
  avatarUrl String?  // 用户头像URL
  isActive  Boolean  @default(true)
  maxWebsites Int    @default(10) // 网站创建限制
  maxTokensPerDay Int @default(100000) // 每日token限制
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  websites      Website[]
  conversations AIConversation[]
  settings      UserSettings?
  tokenUsage    TokenUsage[]
  activities    UserActivity[]
  permissions   UserPermission[]

  @@map("users")
}

model Website {
  id             String   @id @default(cuid())
  userId         String
  domain         String   @unique
  title          String
  description    String?
  content        String   @db.Text
  html           String?  @db.Text
  css            String?  @db.Text
  js             String?  @db.Text
  deploymentPath String?
  status         String   @default("draft")
  sslStatus      String   @default("pending")
  dnsStatus      String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deployedAt     DateTime?

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations   AIConversation[]
  deployments     Deployment[]
  websiteBackups  WebsiteBackup[]
  assets          WebsiteAsset[]

  @@map("websites")
}

model AIConversation {
  id        String   @id @default(cuid())
  userId    String
  websiteId String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  website  Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  messages AIMessage[]

  @@map("ai_conversations")
}

model AIMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String
  content        String   @db.Text
  websiteChanges Json?
  createdAt      DateTime @default(now())

  conversation AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}

model Deployment {
  id         String   @id @default(cuid())
  websiteId  String
  domain     String
  status     String
  serverPath String
  logs       String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("deployments")
}

model ServerConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("server_configs")
}

model DomainConfig {
  id            String   @id @default(cuid())
  domain        String   @unique
  serverPath    String
  nginxConfig   String   @db.Text
  sslCertPath   String?
  sslStatus     String   @default("pending")
  dnsStatus     String   @default("pending")
  isActive      Boolean  @default(true)
  lastChecked   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("domain_configs")
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  deepseekApiKey    String?  @map("deepseek_api_key")
  openaiApiKey      String?  @map("openai_api_key")
  anthropicApiKey   String?  @map("anthropic_api_key")
  aiProvider        String   @default("deepseek") @map("ai_provider")
  deepseekModel     String?  @map("deepseek_model")
  openaiModel       String?  @map("openai_model")
  anthropicModel    String?  @map("anthropic_model")
  systemPrompt      String?  @map("system_prompt") // 保留向后兼容性
  chatPrompt        String?  @map("chat_prompt") // 对话聊天提示词
  generatePrompt    String?  @map("generate_prompt") // 网站生成提示词
  editPrompt        String?  @map("edit_prompt") // 网站编辑提示词
  notificationEmails String? @map("notification_emails") // 通知邮箱（逗号分隔）
  // 通知设置
  emailNotifications Boolean @default(true) @map("email_notifications")
  systemNotifications Boolean @default(true) @map("system_notifications")
  // 安全设置
  twoFactorEnabled  Boolean  @default(false) @map("two_factor_enabled")
  passwordExpiry    Int      @default(90) @map("password_expiry") // 密码过期天数
  // 界面设置
  theme             String   @default("light") // light, dark, system
  language          String   @default("zh") // zh, en
  timezone          String   @default("Asia/Shanghai")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model TokenUsage {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime @db.Date
  hour       Int?     @default(0) // 新增小时字段，0-23
  tokensUsed Int      @default(0) @map("tokens_used")
  costRmb    Decimal  @default(0) @db.Decimal(10, 4) @map("cost_rmb")
  provider   String
  model      String?  // 新增模型字段
  operation  String?  // 新增操作类型字段 (generate, edit, optimize, etc.)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date, hour, provider])
  @@map("token_usage")
}

model UserPermission {
  id          String   @id @default(cuid())
  userId      String
  permission  String
  granted     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}

model WebsiteBackup {
  id        String   @id @default(cuid())
  websiteId String
  version   Int
  html      String?  @db.Text
  css       String?  @db.Text
  js        String?  @db.Text
  createdAt DateTime @default(now())

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, version])
  @@map("website_backups")
}

model SystemSettings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String   @db.Text
  description   String?
  category      String   @default("general") // general, security, deployment, ai
  isPublic      Boolean  @default(false) // 是否对普通用户可见
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("system_settings")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String   // login, logout, create_website, deploy, etc
  resource    String?  // website_id, deployment_id, etc
  ipAddress   String?
  userAgent   String?
  metadata    Json?    // 额外信息
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// =========================
// 模板库与站点资源（新增）
// =========================

model Template {
  id          String   @id @default(cuid())
  type        String   // component | page | theme
  name        String
  slug        String   @unique
  engine      String   // hbs | react | plain
  description String?  @db.Text
  code        String   @db.Text
  schemaJson  Json?
  tokensJson  Json?
  tags        String[]
  version     String   @default("1.0.0")
  previewHtml String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions    TemplateVersion[]

  @@map("templates")
}

model TemplateVersion {
  id          String   @id @default(cuid())
  templateId  String
  version     String
  code        String   @db.Text
  schemaJson  Json?
  createdAt   DateTime @default(now())

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, version])
  @@map("template_versions")
}

model WebsiteAsset {
  id         String   @id @default(cuid())
  websiteId  String
  path       String   // index.html 或 static/css/app.css（相对路径）
  mime       String
  size       Int
  hash       String?
  createdAt  DateTime @default(now())

  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, path])
  @@map("website_assets")
}
